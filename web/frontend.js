// Generated by CoffeeScript 1.6.2
(function() {
  var Frontend, simulator_draw;

  Frontend = (function() {
    function Frontend(p) {
      var _this = this;

      this.p = p;
      this.sim = new Worker('simulation.js');
      this.sim.onmessage = function(event) {
        _this.hasNewBlobs = true;
        return _this.newBlobs = event.data;
      };
      this.hasNewBlobs = false;
      this.running = true;
      this.xLower = 100;
      this.yLower = 100;
      this.xUpper = 100 + C.DISPLAY_X;
      this.yUpper = 100 + C.DISPLAY_Y;
      this.showNucleus = false;
      this.showShells = false;
      this.showReproduction = false;
    }

    Frontend.prototype.step = function() {
      if (this.running && this.hasNewBlobs) {
        this.drawAll(this.newBlobs);
        return this.hasNewBlobs = false;
      }
    };

    Frontend.prototype.keyCode = function(k) {
      if (k === 32) {
        this.running = !this.running;
      }
      if (k === 78) {
        this.showNucleus = !this.showNucleus;
      }
      if (k === 83) {
        this.showShells = !this.showShells;
      }
      if (k === 82) {
        return this.showReproduction = !this.showReproduction;
      }
    };

    Frontend.prototype.drawAll = function(blobs) {
      var blob, blobID;

      this.p.background(0);
      for (blobID in blobs) {
        blob = blobs[blobID];
        this.drawBlob(blob, blob.pos);
      }
      if (C.INFO_WINDOW) {
        return this.infoArea.draw();
      }
    };

    Frontend.prototype.drawBlob = function(blob, position) {
      var blu, blu2, grn, grn2, intersectX, intersectY, nuc_blu, nuc_grn, nuc_red, r, rad, red, red2, weight, x, y;

      r = blob.rad;
      x = position.x;
      y = position.y;
      intersectX = x + r > this.xLower || x - r < this.xUpper;
      intersectY = y + r > this.yLower || y - r < this.yUpper;
      if (intersectX && intersectY) {
        x -= this.xLower;
        y -= this.yLower;
        this.p.noStroke();
        red = blob.atk * 2.55;
        grn = blob.pho * 2.55;
        blu = blob.spd * 2.55;
        this.p.fill(red, grn, blu);
        if (blob.observed != null) {
          this.p.strokeWeight(1);
          this.p.stroke(255);
        }
        this.p.ellipse(x, y, 2 * r, 2 * r);
        if (this.showNucleus) {
          nuc_red = blob.red;
          nuc_grn = blob.grn;
          nuc_blu = blob.blu;
          this.p.fill(nuc_red, nuc_grn, nuc_blu);
          rad = Math.min(3, blob.rad / 2);
          this.p.ellipse(x, y, 2 * rad, 2 * rad);
        }
        if (this.showShells) {
          nuc_red = blob.red;
          nuc_grn = blob.grn;
          nuc_blu = blob.blu;
          this.p.stroke(nuc_red, nuc_grn, nuc_blu);
          this.p.noFill();
          rad = blob.rad;
          this.p.strokeWeight(2);
          this.p.ellipse(x, y, 2 * rad, 2 * rad);
        }
        if (this.showReproduction && (blob.reproducing != null)) {
          red2 = Math.min(red + 9, 255);
          grn2 = Math.min(grn + 9, 255);
          blu2 = Math.min(blu + 9, 255);
          this.p.noFill();
          this.p.stroke(red2, grn2, blu2);
          weight = 5 * (C.REPR_TIME_REQUIREMENT - blob.maintainCurrentAction) / C.REPR_TIME_REQUIREMENT;
          this.p.strokeWeight(weight);
          return this.p.ellipse(x, y, 2 * r - 5, 2 * r - 5);
        }
      }
    };

    return Frontend;

  })();

  simulator_draw = function(p) {
    var frontend;

    frontend = new Frontend(p);
    p.mouseClicked = function() {
      return frontend.mouseClick(p.mouseX, p.mouseY);
    };
    p.setup = function() {
      p.frameRate(C.FRAME_RATE);
      p.size(C.DISPLAY_X, C.DISPLAY_Y + C.DISPLAY_BOUND);
      return p.background(0, 20, 90);
    };
    p.draw = function() {
      return frontend.step();
    };
    return p.keyPressed = function() {
      console.log(p.keyCode);
      return frontend.keyCode(p.keyCode);
    };
  };

  $(document).ready(function() {
    var canvas, processing;

    canvas = document.getElementById("processing");
    return processing = new Processing(canvas, simulator_draw);
  });

}).call(this);
